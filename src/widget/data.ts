import { ChallengeBlock as ChallengeBlockBase } from '@/payload-types'

export const fields: ChallengeBlockBase = {
  id: '687786ead51cc87959fda9f0',
  title: 'If Challenge',
  blockName: '',
  blockType: 'challengeBlock',
  testCases: [
    {
      id: '687787fb2702d107f6f1b019',
      task: {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              type: 'paragraph',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  mode: 'normal',
                  text: "If<true, 'a', 'b'>",
                  type: 'text',
                  style: '',
                  detail: 0,
                  format: 16,
                  version: 1,
                },
              ],
              direction: 'ltr',
              textStyle: '',
              textFormat: 16,
            },
          ],
          direction: 'ltr',
          textFormat: 16,
        },
      },
      test: "type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends(\n    <T>() => T extends Y ? 1 : 2) ? true : false;\ntype Expect<T extends true> = T;\n\ntype Result = Expect<Equal<If<true, 'a', 'b'>, 'a'>>",
      expected: {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              type: 'paragraph',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  mode: 'normal',
                  text: "'a'",
                  type: 'text',
                  style: '',
                  detail: 0,
                  format: 16,
                  version: 1,
                },
              ],
              direction: 'ltr',
              textStyle: '',
              textFormat: 16,
            },
          ],
          direction: 'ltr',
          textFormat: 16,
        },
      },
    },
    {
      id: '68779cece59821b876fd2779',
      task: {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              type: 'paragraph',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  mode: 'normal',
                  text: "If<false, 'a', 2>",
                  type: 'text',
                  style: '',
                  detail: 0,
                  format: 16,
                  version: 1,
                },
              ],
              direction: 'ltr',
              textStyle: '',
              textFormat: 16,
            },
          ],
          direction: 'ltr',
          textFormat: 16,
        },
      },
      test: "type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends(\n    <T>() => T extends Y ? 1 : 2) ? true : false;\ntype Expect<T extends true> = T;\n\ntype Result = Expect<Equal<If<false, 'a', 2>, 2>>;",
      expected: {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              type: 'paragraph',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  mode: 'normal',
                  text: '2',
                  type: 'text',
                  style: '',
                  detail: 0,
                  format: 16,
                  version: 1,
                },
              ],
              direction: null,
              textStyle: '',
              textFormat: 16,
            },
          ],
          direction: null,
          textFormat: 16,
        },
      },
    },
    {
      id: '6877a1b8e88913783541bc36',
      task: {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              type: 'paragraph',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  mode: 'normal',
                  text: "If<boolean, 'a', 2>",
                  type: 'text',
                  style: '',
                  detail: 0,
                  format: 16,
                  version: 1,
                },
              ],
              direction: 'ltr',
              textStyle: '',
              textFormat: 16,
            },
          ],
          direction: 'ltr',
          textFormat: 16,
        },
      },
      test: "type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends(\n    <T>() => T extends Y ? 1 : 2) ? true : false;\ntype Expect<T extends true> = T;\n\ntype Result = Expect<Equal<If<boolean, 'a', 2>, 'a' | 2>>;",
      expected: {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              type: 'paragraph',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  mode: 'normal',
                  text: "'a' | 2",
                  type: 'text',
                  style: '',
                  detail: 0,
                  format: 16,
                  version: 1,
                },
              ],
              direction: 'ltr',
              textStyle: '',
              textFormat: 16,
            },
          ],
          direction: 'ltr',
          textFormat: 16,
        },
      },
    },
  ],
  description: {
    root: {
      type: 'root',
      format: '',
      indent: 0,
      version: 1,
      children: [
        {
          type: 'paragraph',
          format: 'start',
          indent: 0,
          version: 1,
          children: [
            {
              mode: 'normal',
              text: 'Implement the util type ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'If<C, T, F>',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ' which accepts condition ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'C',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ', a truthy value ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'T',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ', and a falsy value ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'F',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: '. ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'C',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ' is expected to be either ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'true',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ' or ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'false',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ' while ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'T',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ' and ',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
            {
              mode: 'normal',
              text: 'F',
              type: 'text',
              style: '',
              detail: 0,
              format: 16,
              version: 1,
            },
            {
              mode: 'normal',
              text: ' can be any type.',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
          ],
          direction: 'ltr',
          textStyle: '',
          textFormat: 0,
        },
        {
          type: 'paragraph',
          format: 'start',
          indent: 0,
          version: 1,
          children: [
            {
              mode: 'normal',
              text: 'For example:',
              type: 'text',
              style: '',
              detail: 0,
              format: 0,
              version: 1,
            },
          ],
          direction: 'ltr',
          textStyle: '',
          textFormat: 0,
        },
        {
          type: 'block',
          fields: {
            id: '687787bcd51cc87959fda9f3',
            code: "type A = If<true, 'a', 'b'>  // expected to be 'a'\ntype B = If<false, 'a', 'b'> // expected to be 'b'",
            language: 'typescript',
            blockName: '',
            blockType: 'code',
            includeLines: false,
          },
          format: '',
          version: 2,
        },
      ],
      direction: 'ltr',
    },
  },
  initialCode: 'type If<C, T, F> = any;',
}
